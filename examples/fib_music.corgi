/*
 *  Function that returns the n'th fibonacci number
 */
int fib(int n) {
    int sum;
    int i;
    if (n == 1) {
        return 1;
    }
    if (n == 2) {
        return 1;
    }
    sum = 1;

    for (i=2; i<n; i=i+1) {
        sum = sum + i;
    }
    return sum;
}

/*
 *  Function that uses the fibonacci number sequence to generate melodies
 */
int main() {
    
    // Variable declarations
    int i;
    chord tempChord;

    int fibNum;
    pitch p;
    duration d;
    
    track cumulativeTrack;
    track helperTrack;

    composition finalComposition;

    // Use a constant quarter note as the duration
    d = $1/4$;
    // Use a starting pitch of 60
    p = 60;

    tempChord = [(p,d)];
    cumulativeTrack = [tempChord];

    for (i=1; i<30; i=i+1) {
        fibNum = fib(i);
        
        // Keep it between 60 and 70
        fibNum = fibNum % 10 + 60;
        p = fibNum;
        tempChord = [(p, d)];

        helperTrack = [tempChord];
        print(helperTrack);

        // Add the helper track to the cumulative
        cumulativeTrack + helperTrack;
    }

    // intialize the final composition
    finalComposition = [cumulativeTrack];

    play(finalComposition);
    export(finalComposition, "fib_sequence.mid");

}